/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/project/builds": {
    get: operations["getAuthProjectBuilds"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Build */
    Build: {
      id: string;
      number: number;
      status:
        | ("accepted" | "rejected")
        | ("stable" | "diffDetected")
        | ("expired" | "pending" | "progress" | "error" | "aborted");
      /** Format: uri */
      url: string;
      notification: {
        description: string;
        context: string;
        github: {
          /** @enum {string} */
          state: "pending" | "success" | "error" | "failure";
        };
        gitlab: {
          /** @enum {string} */
          state: "pending" | "running" | "success" | "failed" | "canceled";
        };
      } | null;
    };
    /** @description Error response */
    Error: {
      error: string;
      details: {
        message: string;
      }[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  getAuthProjectBuilds: {
    parameters: {
      query?: {
        /** @description Number of items per page (max 100) */
        perPage?: string;
        /** @description Page number */
        page?: string;
        /** @description Commit hash. */
        commit?: string;
        /** @description Only return the latest builds created, unique by name and commit. */
        distinctName?: string;
      };
    };
    responses: {
      /** @description List of builds */
      200: {
        content: {
          "application/json": {
            results: components["schemas"]["Build"][];
            pageInfo: {
              total: number;
              page: number;
              perPage: number;
            };
          };
        };
      };
      /** @description Invalid parameters */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
